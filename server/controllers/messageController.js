const Message = require('../models/Message');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logDir = path.join(__dirname, '../logs');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir);
}

const errorLogStream = fs.createWriteStream(path.join(logDir, 'error.log'), { flags: 'a' });
const openaiLogStream = fs.createWriteStream(path.join(logDir, 'openai.log'), { flags: 'a' });

const logError = (error, context = '') => {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${context}: ${error.stack || error}\n`;
  errorLogStream.write(logMessage);
  console.error(logMessage);
};

const logOpenAIRequest = (data) => {
  const timestamp = new Date().toISOString();
  openaiLogStream.write(`[${timestamp}] OpenAI Request: ${JSON.stringify(data, null, 2)}\n`);
};

const logOpenAIResponse = (data) => {
  const timestamp = new Date().toISOString();
  openaiLogStream.write(`[${timestamp}] OpenAI Response: ${JSON.stringify(data, null, 2)}\n`);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
let openai;
try {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY 
  });
  console.log('OpenAI client initialized successfully');
} catch (initError) {
  logError(initError, 'OpenAI Initialization');
  throw new Error('Failed to initialize OpenAI client');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
exports.getMessages = async (req, res) => {
  try {
    console.log('Fetching messages from database');
    const messages = await Message.find().sort({ timestamp: 1 });
    console.log(`Successfully retrieved ${messages.length} messages`);
    res.json(messages);
  } catch (error) {
    logError(error, 'getMessages');
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
      details: error.message 
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
exports.createMessage = async (req, res) => {
  try {
    const { content, type, userId, username } = req.body;
    console.log('Creating new message:', { content, type, userId, username });
    
    const newMessage = new Message({
      content,
      type,
      userId,
      username,
      timestamp: new Date()
    });
    
    const savedMessage = await newMessage.save();
    console.log('Message saved successfully:', savedMessage._id);
    res.status(201).json(savedMessage);
  } catch (error) {
    logError(error, 'createMessage');
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
      details: error.message 
    });
  }
};

// –ò–ò —á–∞—Ç - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
exports.aiChat = async (req, res) => {
  const startTime = Date.now();
  const requestId = Math.random().toString(36).substring(2, 9);
  
  try {
    const { message, type } = req.body;
    
    console.log(`[${requestId}] ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò:`, { 
      type, 
      content: message.content || message,
      timestamp: new Date().toISOString()
    });
    
    let aiResponse;
    let animationData = null;
    let openaiErrorDetails = null;
    
    if (type === 'sign') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log(`[${requestId}] Processing sign message`);
      aiResponse = generateSignResponse(message.content);
      animationData = generateResponseAnimation(aiResponse);

      const response = {
        content: aiResponse,
        type: 'sign',
        userId: 'ai-assistant',
        username: '–ò–ò –ü–æ–º–æ—â–Ω–∏–∫',
        timestamp: new Date(),
        confidence: Math.random() * 0.3 + 0.7,
        animationData: animationData
      };

      console.log(`[${requestId}] üéØ –ò–ò –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (sign):`, response.content);
      res.json(response);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
      console.log(`[${requestId}] Processing text message with OpenAI`);
      
      const userMessage = message.content || message;
      const messages = [{ role: "user", content: userMessage }];
      
      logOpenAIRequest({
        requestId,
        model: "gpt-3.5-turbo",
        messages,
        timestamp: new Date().toISOString()
      });
      
      try {
        const startOpenAI = Date.now();
        const completion = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: messages,
          temperature: 0.7
        });
        
        const openaiDuration = Date.now() - startOpenAI;
        logOpenAIResponse({
          requestId,
          durationMs: openaiDuration,
          response: completion,
          timestamp: new Date().toISOString()
        });
        
        aiResponse = completion.choices[0]?.message?.content;
        console.log(`[${requestId}] OpenAI response received`, {
          responseLength: aiResponse?.length,
          duration: openaiDuration
        });
        
        if (!aiResponse) {
          throw new Error('Empty response from OpenAI');
        }
      } catch (openaiError) {
        openaiErrorDetails = {
          code: openaiError.code,
          message: openaiError.message,
          stack: openaiError.stack,
          status: openaiError.status,
          response: openaiError.response?.data
        };
        
        logError(openaiError, `OpenAI API Error [${requestId}]`);
        console.error(`[${requestId}] ‚ùå OpenAI API Error:`, openaiErrorDetails);
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (openaiError.code === 'invalid_api_key') {
          aiResponse = '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (openaiError.code === 'rate_limit_exceeded') {
          aiResponse = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (openaiError.code === 'context_length_exceeded') {
          aiResponse = '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ.';
        } else if (openaiError.status === 429) {
          aiResponse = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.';
        } else {
          aiResponse = '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        }
      }
      
      animationData = generateResponseAnimation(aiResponse); 
      
      const response = {
        content: aiResponse,
        type: 'text',
        userId: 'ai-assistant',
        username: '–ò–ò –ü–æ–º–æ—â–Ω–∏–∫',
        timestamp: new Date(),
        confidence: Math.random() * 0.3 + 0.7,
        animationData: animationData,
        ...(openaiErrorDetails && { errorDetails: openaiErrorDetails })
      };
      
      console.log(`[${requestId}] üéØ –ò–ò –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (text):`, {
        content: response.content,
        length: response.content?.length,
        hasError: !!openaiErrorDetails
      });
      
      res.json(response);
    }
  } catch (error) {
    const duration = Date.now() - startTime;
    logError(error, `aiChat [${requestId}]`);
    console.error(`[${requestId}] ‚ùå Critical error in aiChat after ${duration}ms:`, error);
    
    res.status(500).json({ 
      error: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      requestId,
      timestamp: new Date().toISOString(),
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∂–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function generateSignResponse(signContent) {
  try {
    console.log('Generating sign response for:', signContent);
    const signResponses = {
      '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å! üëã',
      '—Å–ø–∞—Å–∏–±–æ': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä',
      '–ø–æ–∫–∞': '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üëã',
      '–¥–∞': '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ! ‚úÖ',
      '–Ω–µ—Ç': '–ü–æ–Ω—è—Ç–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑! üëå',
      '–ø–æ–º–æ—â—å': '–ö–æ–Ω–µ—á–Ω–æ! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –∂–µ—Å—Ç–æ–≤—ã–º —è–∑—ã–∫–æ–º! ü§ù',
      '—Ö–æ—Ä–æ—à–æ': '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –Ø —Ä–∞–¥, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ! üòä',
      '–ø–ª–æ—Ö–æ': '–°–æ–∂–∞–ª–µ—é, —á—Ç–æ –¥–µ–ª–∞ –∏–¥—É—Ç –Ω–µ –æ—á–µ–Ω—å. –ú–æ–≥—É –ª–∏ —è —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å? ü§ó',
      'hello': 'Hello! Nice to see you! üëã',
      'no': 'I see. Maybe another time! üëå',
      'please': 'You\'re welcome! How else can I help? üòä'
    };
    
    const lowerSign = signContent.toLowerCase();
    const response = signResponses[lowerSign] || `–Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∂–µ—Å—Ç "${signContent}". –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü–æ–∫–∞–∂–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –∂–µ—Å—Ç! ü§ü`;
    
    console.log('Generated sign response:', response);
    return response;
  } catch (error) {
    logError(error, 'generateSignResponse');
    return `–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –∂–µ—Å—Ç "${signContent}", –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
function generateResponseAnimation(responseText) {
  try {
    if (!responseText) {
      console.warn('Empty response text for animation generation');
      return null;
    }
    
    const duration = Math.max(2000, responseText.length * 50);
    const animation = {
      type: 'gesture',
      duration: duration,
      keyframes: [
        { time: 0, gesture: 'neutral' },
        { time: 0.3, gesture: 'speaking' },
        { time: 0.7, gesture: 'gesturing' },
        { time: 1.0, gesture: 'neutral' }
      ],
      emotion: detectEmotion(responseText)
    };
    
    console.log('Generated animation:', {
      duration,
      emotion: animation.emotion
    });
    
    return animation;
  } catch (error) {
    logError(error, 'generateResponseAnimation');
    return null;
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
function detectEmotion(text) {
  try {
    if (!text) return 'neutral';
    
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('üòä') || lowerText.includes('—Ä–∞–¥') || lowerText.includes('–æ—Ç–ª–∏—á–Ω–æ') || 
        lowerText.includes('happy') || lowerText.includes('great')) {
      return 'happy';
    }
    if (lowerText.includes('üòî') || lowerText.includes('—Å–æ–∂–∞–ª–µ—é') || lowerText.includes('–ø–ª–æ—Ö–æ') || 
        lowerText.includes('sorry') || lowerText.includes('bad')) {
      return 'sad';
    }
    if (lowerText.includes('ü§î') || lowerText.includes('–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ') || lowerText.includes('–¥—É–º–∞—é') || 
        lowerText.includes('think') || lowerText.includes('interesting')) {
      return 'thinking';
    }
    
    return 'neutral';
  } catch (error) {
    logError(error, 'detectEmotion');
    return 'neutral';
  }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∂–µ—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
exports.signToText = async (req, res) => {
  const requestId = Math.random().toString(36).substring(2, 9);
  
  try {
    const { gestureData } = req.body;
    console.log(`[${requestId}] Sign to text conversion request:`, {
      gestureData: gestureData ? 'received' : 'missing'
    });
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const recognizedText = '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∂–µ—Å—Ç: –ø—Ä–∏–≤–µ—Ç';
    
    const result = { 
      text: recognizedText,
      confidence: 0.85,
      timestamp: new Date(),
      requestId
    };
    
    console.log(`[${requestId}] Sign to text result:`, result);
    res.json(result);
  } catch (error) {
    logError(error, `signToText [${requestId}]`);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∂–µ—Å—Ç–∞',
      requestId,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∂–µ—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
exports.textToSign = async (req, res) => {
  const requestId = Math.random().toString(36).substring(2, 9);
  
  try {
    const { text } = req.body;
    console.log(`[${requestId}] Text to sign conversion request:`, {
      textLength: text?.length
    });
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const gestureData = {
      gestures: ['wave', 'point', 'thumbs_up'],
      duration: 3000,
      text: text,
      requestId
    };
    
    console.log(`[${requestId}] Generated gesture data:`, {
      gestures: gestureData.gestures,
      duration: gestureData.duration
    });
    
    res.json({
      gestureData,
      timestamp: new Date(),
      requestId
    });
  } catch (error) {
    logError(error, `textToSign [${requestId}]`);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∂–µ—Å—Ç–∞',
      requestId,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('exit', () => {
  errorLogStream.end();
  openaiLogStream.end();
});

process.on('SIGINT', () => process.exit());
process.on('SIGTERM', () => process.exit());