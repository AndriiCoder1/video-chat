const Message = require('../models/Message');
const OpenAI = require('openai');
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY 
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
exports.getMessages = async (req, res) => {
  try {
    const messages = await Message.find().sort({ timestamp: 1 });
    res.json(messages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
exports.createMessage = async (req, res) => {
  try {
    const { content, type, userId, username } = req.body;
    
    const newMessage = new Message({
      content,
      type,
      userId,
      username,
      timestamp: new Date()
    });
    
    const savedMessage = await newMessage.save();
    res.status(201).json(savedMessage);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
  }
};

// –ò–ò —á–∞—Ç - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.aiChat = async (req, res) => {
  try {
    const { message, type } = req.body;
    
    console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò:', { message, type });
    
    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    let aiResponse;
    let animationData = null;
    
    if (type === 'sign') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      aiResponse = generateSignResponse(message.content);
      animationData = generateResponseAnimation(aiResponse);

  const response = {
    content: aiResponse,
    type: 'sign',
    userId: 'ai-assistant',
    username: '–ò–ò –ü–æ–º–æ—â–Ω–∏–∫',
    timestamp: new Date(),
    confidence: Math.random() * 0.3 + 0.7, // 70-100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    animationData: animationData
  };

  console.log('üéØ –ò–ò –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', response.content);
  res.json(response);
  } else {
     // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
  const completion = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    messages: [{ role: "user", content: message.content || message }]
  });
    aiResponse = completion.choices[0].message.content;
    animationData = generateResponseAnimation(aiResponse); 
    
    const response = {
      content: aiResponse,
      type: 'text',
      userId: 'ai-assistant',
      username: '–ò–ò –ü–æ–º–æ—â–Ω–∏–∫',
      timestamp: new Date(),
      confidence: Math.random() * 0.3 + 0.7, // 70-100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      animationData: animationData
    };
    
    console.log('üéØ –ò–ò –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', response.content);
    res.json(response);
   }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ò–ò —á–∞—Ç–∞:', error);
    res.status(500).json({ 
      error: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' 
    });
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∂–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function generateSignResponse(signContent) {
  const signResponses = {
    '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å! üëã',
    '—Å–ø–∞—Å–∏–±–æ': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä',
    '–ø–æ–∫–∞': '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üëã',
    '–¥–∞': '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ! ‚úÖ',
    '–Ω–µ—Ç': '–ü–æ–Ω—è—Ç–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑! üëå',
    '–ø–æ–º–æ—â—å': '–ö–æ–Ω–µ—á–Ω–æ! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –∂–µ—Å—Ç–æ–≤—ã–º —è–∑—ã–∫–æ–º! ü§ù',
    '—Ö–æ—Ä–æ—à–æ': '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –Ø —Ä–∞–¥, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ! üòä',
    '–ø–ª–æ—Ö–æ': '–°–æ–∂–∞–ª–µ—é, —á—Ç–æ –¥–µ–ª–∞ –∏–¥—É—Ç –Ω–µ –æ—á–µ–Ω—å. –ú–æ–≥—É –ª–∏ —è —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å? ü§ó'
  };
  
  const lowerSign = signContent.toLowerCase();
  return signResponses[lowerSign] || `–Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∂–µ—Å—Ç "${signContent}". –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü–æ–∫–∞–∂–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –∂–µ—Å—Ç! ü§ü`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function generateTextResponse(text) {
  const lowerText = text.toLowerCase();
  
  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  if (lowerText.includes('–ø—Ä–∏–≤–µ—Ç') || lowerText.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
    return '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –æ–±—â–µ–Ω–∏—é —Å –≤–∞–º–∏. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∂–µ—Å—Ç—ã! üëã';
  }
  
  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏
  if (lowerText.includes('–∫–∞–∫ –¥–µ–ª–∞') || lowerText.includes('–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—Ç–µ')) {
    return '–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∂–µ—Å—Ç–æ–≤–æ–≥–æ —è–∑—ã–∫–∞. üòä';
  }
  
  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤—Ä–µ–º–µ–Ω–∏
  if (lowerText.includes('–≤—Ä–µ–º—è') || lowerText.includes('—á–∞—Å') || lowerText.includes('–¥–µ–Ω—å') || lowerText.includes('–º–µ—Å—è—Ü')) {
    const now = new Date();
    const timeStr = now.toLocaleTimeString('ru-RU');
    const dateStr = now.toLocaleDateString('ru-RU');
    return `–°–µ–π—á–∞—Å ${timeStr}, –¥–∞—Ç–∞: ${dateStr}. –•–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å –∂–µ—Å—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏? ‚è∞`;
  }
  
  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∂–µ—Å—Ç–æ–≤–æ–º —è–∑—ã–∫–µ
  if (lowerText.includes('–∂–µ—Å—Ç') || lowerText.includes('—è–∑—ã–∫') || lowerText.includes('—É—á–∏—Ç—å')) {
    return '–ñ–µ—Å—Ç–æ–≤—ã–π —è–∑—ã–∫ - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è! –ü–æ–∫–∞–∂–∏—Ç–µ –ª—é–±–æ–π –∂–µ—Å—Ç, –∏ —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é! ü§ü';
  }
  
  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  if (lowerText.includes('—Å–ø–∞—Å–∏–±–æ') || lowerText.includes('–±–ª–∞–≥–æ–¥–∞—Ä—é')) {
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? üòä';
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  const defaultResponses = [
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –∏–ª–∏ –ø–æ–∫–∞–∂–∏—Ç–µ –∂–µ—Å—Ç! ü§î',
    '–ü–æ–Ω–∏–º–∞—é –≤–∞—Å. –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–±—Å—É–¥–∏—Ç—å? üí≠',
    '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑–∞—Ç—å –∂–µ—Å—Ç. üëê',
    '–•–æ—Ä–æ—à–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –∂–µ—Å—Ç - —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é! üéØ',
    '–ü–æ–Ω—è–ª! –ê —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∂–µ—Å—Ç? ü§ü'
  ];
  
  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
function generateResponseAnimation(responseText) {
  // –ë–∞–∑–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
  const duration = Math.max(2000, responseText.length * 50);
  
  return {
    type: 'gesture',
    duration: duration,
    keyframes: [
      { time: 0, gesture: 'neutral' },
      { time: 0.3, gesture: 'speaking' },
      { time: 0.7, gesture: 'gesturing' },
      { time: 1.0, gesture: 'neutral' }
    ],
    emotion: detectEmotion(responseText)
  };
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
function detectEmotion(text) {
  const lowerText = text.toLowerCase();
  
  if (lowerText.includes('üòä') || lowerText.includes('—Ä–∞–¥') || lowerText.includes('–æ—Ç–ª–∏—á–Ω–æ')) {
    return 'happy';
  }
  if (lowerText.includes('üòî') || lowerText.includes('—Å–æ–∂–∞–ª–µ—é') || lowerText.includes('–ø–ª–æ—Ö–æ')) {
    return 'sad';
  }
  if (lowerText.includes('ü§î') || lowerText.includes('–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ') || lowerText.includes('–¥—É–º–∞—é')) {
    return 'thinking';
  }
  
  return 'neutral';
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∂–µ—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç (–∑–∞–≥–ª—É—à–∫–∞)
exports.signToText = async (req, res) => {
  try {
    const { gestureData } = req.body;
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∂–µ—Å—Ç–æ–≤
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const recognizedText = '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∂–µ—Å—Ç: –ø—Ä–∏–≤–µ—Ç';
    
    res.json({ 
      text: recognizedText,
      confidence: 0.85,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∂–µ—Å—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∂–µ—Å—Ç–∞' });
  }
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∂–µ—Å—Ç (–∑–∞–≥–ª—É—à–∫–∞)
exports.textToSign = async (req, res) => {
  try {
    const { text } = req.body;
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∂–µ—Å—Ç–æ–≤
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const gestureData = {
      gestures: ['wave', 'point', 'thumbs_up'],
      duration: 3000,
      text: text
    };
    
    res.json({
      gestureData,
      timestamp: new Date()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∂–µ—Å—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∂–µ—Å—Ç–∞' });
  }
};